#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2021 Joyent, Inc.
#

#
# Setup SmartOS GZ for running dumb NAT zones
#

set -o xtrace

. /lib/svc/share/smf_include.sh

cd /
export PATH=/opt/custom/bin:/usr/sbin:/usr/bin

case "$1" in
'start')
    # Hostname!
    hostname=$(. /usbkey/config ; echo ${hostname} | tr '.' '_')
    if [[ -n ${hostname} ]]; then
         hostname "${hostname}" && hostname > /etc/nodename
    fi
    ext_ip=$(. /usbkey/config ; echo ${admin_ip})
    [[ -n ${ext_ip} ]] || exit $SMF_EXIT_ERR_FATAL

    # Don't need Ur
    svcadm disable svc:/smartdc/agent/ur:default || /bin/true

    # Don't need mDNS spewing errors
    svcadm disable svc:/network/dns/multicast:default || /bin/true

    # NOPE
    svcadm disable svc:/network/smtp:sendmail svc:/network/sendmail-client:default
    for i in $(seq 2 6); do svcadm disable svc:/system/console-login:vt${i}; done
    svcadm disable svc:/system/smartdc/vmadmd:default

    # Setup dotfiles and root's homedir
    if [[ -d /opt/custom/root ]]; then
        rm -rf /root && ln -s /opt/custom/root /root
    fi

    # We'll use 172.16.9.0/24 because this doesn't conflict with the lab
    INT_ETHERSTUB=vswitch0
    INT_IF=vnic0
    INT_CIDR=172.16.9.1/24
    INT_NET=172.16.9.0/24
    EXT_IP=${ext_ip}
    EXT_IF=$(dladm show-phys -po link | head -1)

    # Networking
    dladm create-vnic -t -l ${INT_ETHERSTUB} ${INT_IF}
    ifconfig ${INT_IF} plumb ${INT_CIDR} up
    routeadm -u -e ipv4-forwarding

    # Wipe existing rules
    rm -f /etc/ipf/ipnat.conf
    rm -f /etc/ipf/ipf.conf

    # FW rules
    cat << EOF > /etc/ipf/ipf.conf
## Always allow lo0
pass in quick on lo0 all
pass out quick on lo0 all

## Allow ping/traceroute
pass out quick on ${EXT_IF} proto icmp from ${EXT_IP} to any icmp-type 8 keep state
pass in quick on ${EXT_IF} proto icmp from any to ${EXT_IP} icmp-type 8 keep state

## Allow In Ports (TODO: limit to just a set of allowed nets?)
pass in quick on ${EXT_IF} proto tcp from any to ${EXT_IP} port = 22 flags S/FSRPAU keep state keep frags

## Allow outbound from GZ
pass out quick on ${EXT_IF} proto tcp from ${EXT_IP} to any flags S/FSRPAU keep state keep frags
pass out quick on ${EXT_IF} from ${EXT_IP} to any port = 53 keep state keep frags
pass out quick on ${EXT_IF} proto udp from any to any port = 123 keep state

## Allow traffic on vswitch
pass in quick on ${INT_IF} proto tcp/udp from ${INT_NET} to any keep state
pass out quick on ${EXT_IF} proto tcp/udp from ${INT_NET} to any keep state
pass in quick on ${INT_IF} proto icmp from ${INT_NET} to any keep state
pass out quick on ${EXT_IF} proto icmp from ${INT_NET} to any keep state

## Block everything else
block in quick log first on ${EXT_IF} all
block out quick log first on ${EXT_IF} all
EOF

    # NAT rules
    cat << EOF > /etc/ipf/ipnat.conf
map ${EXT_IF} ${INT_NET} -> 0/32 portmap tcp/udp auto
map ${EXT_IF} ${INT_NET} -> 0/32
EOF

    # launch ipfilter and load the NAT rules
    svcadm enable ipfilter
    ipf -E -Fa -v -f /etc/ipf/ipf.conf
    ipnat -C -v -f /etc/ipf/ipnat.conf

    # add any missing keys from root_authorized_keys
    if mdata-get root_authorized_keys >/root/.ssh/authorized_keys.new; then
        cp /root/.ssh/authorized_keys /root/.ssh/authorized_keys.old
        cat /root/.ssh/authorized_keys.{new,old} | sort \
            | grep -E '^(ssh|ecdsa)' | uniq \
            > /root/.ssh/authorized_keys.replacement
        mv /root/.ssh/authorized_keys.replacement /root/.ssh/authorized_keys
        rm -f /root/.ssh/authorized_keys.{new,old}
    fi

    ;;

*)
    echo "Usage: $0 { start }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK

